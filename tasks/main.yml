---
- debug: var=release verbosity=1
  tags: vars

- name: Check if App is properly installed
  stat:
    path: "{{ release.target }}/{{ release.project }}/{{ release.release_symlink }}"
  register: app_root
  failed_when: not (app_root.stat.islnk is defined and app_root.stat.islnk)

- name: Check if App is a git repo
  stat:
    path: "{{ release.target }}/{{ release.project }}/{{ release.release_symlink }}/.git"
  register: app_repo
  failed_when: not (app_repo.stat.isdir is defined and app_repo.stat.isdir)

# TODO: Check if App directory is clean (not modified/untracked files, use "git status" )

- name: Get new release directory
  shell: "date +\"%Y%m%d%H%M%S\""
  register: release_dir
  changed_when: False

- name: Create release directory
  file:
   path: "{{ release.target }}/{{ release.project }}/{{ release.release_dirname }}/{{ release_dir.stdout }}"
   state: directory

- name: Copy App to new release directory
  shell: "rsync -aAX --inplace {% for path in release.sync_exclude %}--exclude '{{ path }}' {% endfor %}{{ release.release_symlink }}/ {{ release.release_dirname }}/{{ release_dir.stdout }}/"
  args:
    chdir: "{{ release.target }}/{{ release.project }}"

- name: Get current branch
  shell: "git rev-parse --abbrev-ref HEAD"
  args:
    chdir: "{{ release.target }}/{{ release.project }}/{{ release.release_dirname }}/{{ release_dir.stdout }}"
  register: current_branch
  changed_when: False

- name: Get latest code
  git:
    dest: "{{ release.target }}/{{ release.project }}/{{ release.release_dirname }}/{{ release_dir.stdout }}"
    force: yes
    repo: "{{ release['repo'] }}"
    version: master

- name: Check if new code exists to release
  shell: "branchdiff=$(git diff {{ current_branch.stdout }}) && if [ ! -z \"$branchdiff\" -a \"$branchdiff\" != \"\" ]; then echo 'New code'; fi"
  args:
    chdir: "{{ release.target }}/{{ release.project }}/{{ release.release_dirname }}/{{ release_dir.stdout }}"
  register: new_code
  ignore_errors: yes
  changed_when: False

- block:
    - name: Abort release
      include: abort.yml
  when: new_code.stdout == "" or new_code.stderr != ""

- block:
    - name: Release new code
      include: release.yml
  when: new_code.stdout != "" and new_code.stderr == ""
