#!/bin/bash
# {{ ansible_managed }}
# Release new feature, Idempotent, instantaneous and ACID.
# Arguments <project>

TIMESTART=$(date +%s);
DATE=$(date);
BASEDIR=$(dirname $0);
HOSTNAME=$(hostname);
VERSION=$1

if [ -z $VERSION ]; then
    echo "No version was provided.";
    exit 0;
fi

if [[ -L app ]] && [[ -d app/.git ]] && [[ "$(readlink app)" = "releases/current" ]]; then

    RELEASEROOT=$(pwd);
    echo "Releasing version $VERSION on $HOSTNAME:${RELEASEROOT} at $DATE";

    if [ -f .lock ]; then
        echo "Locked, please wait until the current operation ends.";
    else
        echo "Locking the ${RELEASEROOT} to perform the operation";
        touch .lock;

        rm -rf releases/new;
        mkdir -p releases/new;
        rsync -aA --exclude-from '/usr/local/release/exclude_list.txt' releases/current/ releases/new/;

        cd releases/new;
        echo "Pulling lastest code from Prod ..."
        git checkout master;
        git fetch --all -p;
        PULLRESULT=$(git pull 2>&1);
        echo "$PULLRESULT";
        UPTODATE=$(echo $PULLRESULT | grep "Already up-to-date.");

        if [ -z "$UPTODATE" ]; then
            CURRENTVERSION=$(git describe --dirty --always --abbrev=0 --tags 2>&1 | grep 'v');
            if [ "$CURRENTVERSION" == "$VERSION" ]; then
                TAGDIFF=$(git diff ${VERSION});
                if [ -z "$TAGDIFF" ]; then
                    #TODO: remove out of retention period branches
                    git checkout tags/$VERSION -b release-$VERSION

                    # Commands executing during the release

                    {% for command in release['during_commands'] %}
                    echo "Executing {{ command.name }}";
                    {{ command.command }} &&
                    {% else %}
                    echo "No commands available";
                    {% endfor %}

                    cd ${RELEASEROOT};
                    echo "New release symlink";
                    ln -sf releases/new latest;

                    #TODO: pre-generate cache, create a new VHwith access restriction and use wget or curl with a URLs text file to create cache.

                    echo "Publishing the new release $VERSION"
                    mv -T latest app;

                    #TODO: Purge Varnish

                    echo "Saving the previous release";
                    rm -rf releases/previous;
                    mv releases/current releases/previous;

                    echo "Renaming the new release to current";
                    mkdir -p releases/current;
                    rsync -a releases/new/ releases/current/;
                    ln -sf releases/current tmp_app;
                    mv -T tmp_app app;
                else
                    echo "Release version $VERSION is not equal to master";
                fi
            else
              echo "Current version $CURRENTVERSION is not equal to release version $VERSION";
            fi
        else
            echo "Nothing new to release";
        fi
        cd ${RELEASEROOT};
        rm -rf releases/new;

        echo "Unlocking the ${RELEASEROOT} directory";
        cd $RELEASEROOT;
        rm .lock
    fi
else
    echo "Release directories on ${RELEASEROOT} are not properly installed.";
fi

echo "";
TIMEEND=$(date +%s);
TIMEDIFF=$(( $TIMEEND - $TIMESTART ));
echo "Process ended in $TIMEDIFF seconds.";
echo "End of the process.";

exit 0;
